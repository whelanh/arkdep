name: Build AtomicArch Daily (Simple)

on:
  schedule:
    # Run daily at 2:00 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggering
  push:
    branches: [ main, master ]
    paths:
      - 'arkdep-build.d/atomicarch/**'
      - 'arkdep-build'
      - '.github/workflows/build-atomicarch-simple.yml'

env:
  IMAGE_NAME: atomicarch

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
      options: --privileged --device /dev/loop-control --device /dev/loop0 --device /dev/loop1 --device /dev/loop2 --device /dev/loop3 --device /dev/loop4 --device /dev/loop5 --device /dev/loop6 --device /dev/loop7
    permissions:
      contents: read
      packages: write

    steps:
    - name: Install essential tools
      run: |
        # Update system and install essential packages
        pacman -Syu --noconfirm
        pacman -S --noconfirm git base-devel btrfs-progs squashfs-tools xz wget curl

    - name: Install arch-install-scripts and dependencies
      run: |
        # Install arch-install-scripts which provides pacstrap
        pacman -S --noconfirm arch-install-scripts
        
        # Verify the tools are available
        which pacstrap
        which btrfs

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize pacman keyring
      run: |
        pacman-key --init
        pacman-key --populate archlinux

    - name: Setup loop devices
      run: |
        # Ensure loop devices are available
        ls -la /dev/loop*
        modprobe loop || echo "Loop module already loaded"

    - name: Make arkdep-build executable
      run: chmod +x ./arkdep-build

    - name: Build AtomicArch image
      run: |
        # Run the build (arkdep-build expects to run as root)
        ./arkdep-build atomicarch

    - name: Generate build info
      id: build_info
      run: |
        BUILD_DATE=$(date +%Y%m%d%H%M%S)
        IMAGE_TAG="atomicarch-${BUILD_DATE}"
        echo "build_date=${BUILD_DATE}" >> $GITHUB_OUTPUT
        echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
        echo "artifact_name=atomicarch-${BUILD_DATE}" >> $GITHUB_OUTPUT

    - name: List build output
      run: |
        echo "Contents of target directory:"
        ls -la target/ || echo "No target directory found"
        echo "Contents of current directory:"
        ls -la

    - name: Compress build artifacts
      run: |
        if [ -d "target" ]; then
          cd target
          tar -czf ../atomicarch-${{ steps.build_info.outputs.build_date }}.tar.gz *
          cd ..
          ls -la atomicarch-*.tar.gz
        else
          echo "No target directory found, creating empty archive"
          tar -czf atomicarch-${{ steps.build_info.outputs.build_date }}.tar.gz --files-from /dev/null
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.build_info.outputs.artifact_name }}
        path: atomicarch-${{ steps.build_info.outputs.build_date }}.tar.gz
        retention-days: 30

    - name: Create release (on main branch only)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.build_info.outputs.image_tag }}
        name: AtomicArch Build ${{ steps.build_info.outputs.build_date }}
        body: |
          Automated daily build of AtomicArch
          
          Build Date: ${{ steps.build_info.outputs.build_date }}
          Commit: ${{ github.sha }}
          
          This is an automated build created by GitHub Actions using Arch Linux container.
          
          ## Installation
          1. Download the tar.gz file
          2. Extract it: `tar -xzf atomicarch-*.tar.gz`
          3. Follow arkdep installation instructions
        artifacts: atomicarch-${{ steps.build_info.outputs.build_date }}.tar.gz
        draft: false
        prerelease: false
        allowUpdates: true
        token: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Delete old releases
      uses: actions/github-script@v7
      with:
        script: |
          const { data: releases } = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          // Keep only the latest 7 daily builds
          const atomicArchReleases = releases
            .filter(release => release.tag_name.startsWith('atomicarch-'))
            .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
            .slice(7);
          
          for (const release of atomicArchReleases) {
            console.log(`Deleting old release: ${release.tag_name}`);
            await github.rest.repos.deleteRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id
            });
            
            // Also delete the tag
            try {
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${release.tag_name}`
              });
            } catch (error) {
              console.log(`Could not delete tag ${release.tag_name}: ${error.message}`);
            }
          }
