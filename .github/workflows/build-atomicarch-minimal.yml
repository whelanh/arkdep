name: Build AtomicArch Daily (Minimal)

on:
  schedule:
    # Run daily at 2:00 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggering
  push:
    branches: [ main, master ]
    paths:
      - 'arkdep-build.d/atomicarch/**'
      - 'arkdep-build'
      - '.github/workflows/build-atomicarch-minimal.yml'

env:
  IMAGE_NAME: atomicarch

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
      options: --privileged --device /dev/loop-control --device /dev/loop0 --device /dev/loop1 --device /dev/loop2 --device /dev/loop3 --device /dev/loop4 --device /dev/loop5 --device /dev/loop6 --device /dev/loop7
    permissions:
      contents: read
      packages: write

    steps:
    - name: Maximize available storage
      run: |
        # Remove unnecessary packages to free space
        pacman -Rns --noconfirm $(pacman -Qtdq) 2>/dev/null || true
        pacman -Scc --noconfirm
        
        # Remove unnecessary files
        rm -rf /usr/share/{man,doc,info,locale}/* || true
        rm -rf /var/cache/pacman/pkg/* || true
        rm -rf /var/lib/pacman/sync/* || true
        rm -rf /tmp/* /var/tmp/* || true
        
        echo "Available storage after cleanup:"
        df -h

    - name: Install minimal required packages
      run: |
        # Only install what we absolutely need
        pacman -Sy --noconfirm
        pacman -S --noconfirm --needed git arch-install-scripts btrfs-progs

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize pacman keyring (minimal)
      run: |
        pacman-key --init
        pacman-key --populate archlinux

    - name: Create ultra-minimal arkdep build script
      run: |
        # Create a severely space-constrained version
        cp arkdep-build arkdep-build-original
        
        # Patch for minimal storage (using only what GitHub Actions provides)
        sed -i 's/minimum_available_root_storage=.*/minimum_available_root_storage="5242880" # 5G/' arkdep-build
        sed -i 's/minimum_available_var_storage=.*/minimum_available_var_storage="2097152" # 2G/' arkdep-build
        sed -i 's/build_image_size=.*/build_image_size="4G"/' arkdep-build
        
        # Make it executable
        chmod +x ./arkdep-build
        
        # Show what we changed
        echo "Patched storage requirements:"
        grep -E "minimum_available|build_image_size" arkdep-build

    - name: Pre-build storage check
      run: |
        echo "Final storage check before build:"
        df -h
        echo "Free space on root (KiB):" $(df --output=avail / | tail -1)
        echo "Free space on /var/tmp (KiB):" $(df --output=avail /var/tmp 2>/dev/null | tail -1 || echo "N/A")
        
        # Ensure /var/tmp exists
        mkdir -p /var/tmp

    - name: Attempt minimal build
      run: |
        echo "Running as: $(whoami)"
        echo "UID: $(id -u)"
        
        # Try the build with minimal settings
        ./arkdep-build atomicarch || {
          echo "Build failed, checking available space and logs..."
          df -h
          ls -la /var/tmp/ || true
          exit 1
        }

    - name: Generate build info
      id: build_info
      run: |
        BUILD_DATE=$(date +%Y%m%d%H%M%S)
        IMAGE_TAG="atomicarch-${BUILD_DATE}"
        echo "build_date=${BUILD_DATE}" >> $GITHUB_OUTPUT
        echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
        echo "artifact_name=atomicarch-${BUILD_DATE}" >> $GITHUB_OUTPUT

    - name: List and compress build artifacts
      run: |
        echo "Contents of target directory:"
        ls -la target/ || echo "No target directory found"
        
        echo "Contents of current directory:"
        ls -la
        
        if [ -d "target" ] && [ "$(ls -A target 2>/dev/null)" ]; then
          cd target
          # Use maximum compression to save space
          tar -czf ../atomicarch-${{ steps.build_info.outputs.build_date }}.tar.gz *
          cd ..
          echo "Created archive:"
          ls -la atomicarch-*.tar.gz
        else
          echo "No build artifacts found, creating placeholder archive"
          echo "Build completed but no artifacts found" > build_info.txt
          tar -czf atomicarch-${{ steps.build_info.outputs.build_date }}.tar.gz build_info.txt
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.build_info.outputs.artifact_name }}
        path: atomicarch-${{ steps.build_info.outputs.build_date }}.tar.gz
        retention-days: 30

    - name: Create release (on main branch only)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.build_info.outputs.image_tag }}
        name: AtomicArch Build ${{ steps.build_info.outputs.build_date }}
        body: |
          Automated daily build of AtomicArch (Minimal Storage Version)
          
          Build Date: ${{ steps.build_info.outputs.build_date }}
          Commit: ${{ github.sha }}
          
          This build uses minimal storage settings optimized for GitHub Actions.
          
          ⚠️ **Note**: This build may have reduced functionality due to storage constraints.
          
          ## Installation
          1. Download the tar.gz file
          2. Extract it: `tar -xzf atomicarch-*.tar.gz`
          3. Follow arkdep installation instructions
        artifacts: atomicarch-${{ steps.build_info.outputs.build_date }}.tar.gz
        draft: false
        prerelease: true  # Mark as prerelease due to constraints
        allowUpdates: true
        token: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Delete old releases
      uses: actions/github-script@v7
      with:
        script: |
          const { data: releases } = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          // Keep only the latest 5 minimal builds (fewer due to space constraints)
          const atomicArchReleases = releases
            .filter(release => release.tag_name.startsWith('atomicarch-'))
            .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
            .slice(5);
          
          for (const release of atomicArchReleases) {
            console.log(`Deleting old release: ${release.tag_name}`);
            await github.rest.repos.deleteRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id
            });
            
            // Also delete the tag
            try {
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${release.tag_name}`
              });
            } catch (error) {
              console.log(`Could not delete tag ${release.tag_name}: ${error.message}`);
            }
          }
