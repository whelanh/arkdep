name: Build AtomicArch Daily

on:
  schedule:
    # Run daily at 2:00 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggering
  push:
    branches: [ main, master ]
    paths:
      - 'arkdep-build.d/atomicarch/**'
      - 'arkdep-build'
      - '.github/workflows/build-atomicarch.yml'

env:
  IMAGE_NAME: atomicarch

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          arch-install-scripts \
          btrfs-progs \
          squashfs-tools \
          xz-utils \
          wget \
          curl \
          systemd-container

    - name: Set up Arch Linux chroot environment
      run: |
        # Download and set up pacstrap
        wget https://archlinux.org/packages/core/any/pacman/download/ -O pacman.pkg.tar.xz
        sudo tar -xf pacman.pkg.tar.xz -C /
        
        # Install archlinux-keyring
        wget https://archlinux.org/packages/core/any/archlinux-keyring/download/ -O keyring.pkg.tar.xz
        sudo tar -xf keyring.pkg.tar.xz -C /
        
        # Initialize pacman keyring
        sudo pacman-key --init
        sudo pacman-key --populate archlinux

    - name: Make arkdep-build executable
      run: chmod +x ./arkdep-build

    - name: Build AtomicArch image
      run: |
        sudo ./arkdep-build atomicarch

    - name: Generate build info
      id: build_info
      run: |
        BUILD_DATE=$(date +%Y%m%d%H%M%S)
        IMAGE_TAG="atomicarch-${BUILD_DATE}"
        echo "build_date=${BUILD_DATE}" >> $GITHUB_OUTPUT
        echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
        echo "artifact_name=atomicarch-${BUILD_DATE}" >> $GITHUB_OUTPUT

    - name: Compress build artifacts
      run: |
        cd target
        sudo tar -czf ../atomicarch-${{ steps.build_info.outputs.build_date }}.tar.gz *
        cd ..
        ls -la atomicarch-*.tar.gz

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.build_info.outputs.artifact_name }}
        path: atomicarch-${{ steps.build_info.outputs.build_date }}.tar.gz
        retention-days: 30

    - name: Create release (on main branch only)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.build_info.outputs.image_tag }}
        name: AtomicArch Build ${{ steps.build_info.outputs.build_date }}
        body: |
          Automated daily build of AtomicArch
          
          Build Date: ${{ steps.build_info.outputs.build_date }}
          Commit: ${{ github.sha }}
          
          This is an automated build created by GitHub Actions.
        artifacts: atomicarch-${{ steps.build_info.outputs.build_date }}.tar.gz
        draft: false
        prerelease: false
        allowUpdates: true
        token: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Delete old releases
      uses: actions/github-script@v7
      with:
        script: |
          const { data: releases } = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          // Keep only the latest 7 daily builds
          const atomicArchReleases = releases
            .filter(release => release.tag_name.startsWith('atomicarch-'))
            .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
            .slice(7);
          
          for (const release of atomicArchReleases) {
            console.log(`Deleting old release: ${release.tag_name}`);
            await github.rest.repos.deleteRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id
            });
            
            // Also delete the tag
            try {
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${release.tag_name}`
              });
            } catch (error) {
              console.log(`Could not delete tag ${release.tag_name}: ${error.message}`);
            }
          }
